plugins {
    id 'java'
    id 'eclipse'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.parchmentmc.librarian.forgegradle' version '1.+'
    id 'org.spongepowered.mixin' version '0.7-SNAPSHOT'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

version = '1.20.1-1.0.3'
group = 'com.vandendaelen'
base {
    archivesName = 'nicephore'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.console.level', 'debug'

            mods {
                nicephore {
                    source sourceSets.main
                }
            }
        }

        client {}

        server {}

        data {
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'nicephore', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

configurations {
    library
    shade
    implementation.extendsFrom library
    shade.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20.1-47.4.0'
    implementation 'com.profesorfalken:jPowerShell:3.1.1'
    shade 'com.profesorfalken:jPowerShell:3.1.1'
    library 'com.profesorfalken:jPowerShell:3.1.1'

//    implementation 'com.drewnoakes:metadata-extractor:2.17.0'
//    shade 'com.drewnoakes:metadata-extractor:2.17.0'
//    library 'com.drewnoakes:metadata-extractor:2.17.0'

    //implementation fg.deobf("curse.maven:ksyxis-537533:3502166")

    // Mixin
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

ext {
    MANIFEST = manifest {
        attributes([
                "Specification-Title"     : "nicephore",
                "Specification-Vendor"    : "lotuxpunk",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "lotuxpunk",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar) {
    manifest.from(MANIFEST)
    finalizedBy 'reobfJar'
}

shadowJar {
    archiveClassifier.set('fat')
    configurations = [project.configurations.shade]

    manifest.from(MANIFEST)
}

reobf {
    shadowJar {}
}
